services:
  # Database - running PostgreSQL
  db:
    image: postgres:16
    container_name: postgres_db
    restart: always
    secrets:
      - db_postgres_password
      - db_migrations_password
      - db_backend_password
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    env_file: .env
    environment:
      MIGRATIONS_ROLE: ${MIGRATIONS_ROLE}
      DB_USER: ${DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_postgres_password
      DB_NAME: ${DB_NAME}
      HEALTHCHECK_ROLE: ${HEALTHCHECK_ROLE}
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${HEALTHCHECK_ROLE}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migrations - handled by Flyway
  migrations:
    image: redgate/flyway:11
    container_name: flyway_migrations
    secrets:
      - db_migrations_password
    entrypoint:
      [
        "sh",
        "-c",
        "export FLYWAY_PASSWORD=$(cat /run/secrets/db_migrations_password) && flyway migrate",
      ]
    volumes:
      - ./db/migrations:/flyway/sql
    env_file: .env
    environment:
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_VALIDATE_ON_MIGRATE: true
      FLYWAY_USER: ${MIGRATIONS_ROLE}
      FLYWAY_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      FLYWAY_CONNECT_RETRIES: ${FLYWAY_CONNECT_RETRIES}
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
      FLYWAY_SCHEMAS: ${FLYWAY_SCHEMAS}
    depends_on:
      db:
        condition: service_healthy

  # Backend Service - running ASP.NET Core web API app
  backend:
    container_name: linksapi_backend
    secrets:
      - backend_connectionstring
    build:
      context: .
      target: runtime
    ports:
      - 8080:8080
    entrypoint:
      [
        "sh",
        "-c",
        "set -e; export ConnectionStrings__DefaultConnection=$(cat /run/secrets/backend_connectionstring) && exec dotnet LinksApi.Web.dll",
      ]
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

# Secrets
secrets:
  backend_connectionstring:
    file: secrets/backend_connectionstring.txt
  db_backend_password:
    file: secrets/db_backend_password.txt
  db_postgres_password:
    file: secrets/db_postgres_password.txt
  db_migrations_password:
    file: secrets/db_migrations_password.txt

# Persistent Storage
volumes:
  db_data:
